[{"C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\index.tsx":"1","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\reportWebVitals.ts":"2","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\app\\store.ts":"3","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\app\\App.tsx":"4","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\todolists-reducer.ts":"5","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\tasks-reducer.ts":"6","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\TodolistsList.tsx":"7","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\api\\todolists-api.ts":"8","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"9","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\components\\AddItemForm\\AddItemForm.tsx":"10","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"11","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\components\\EditableSpan\\EditableSpan.tsx":"12","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\app\\app-reducer.ts":"13","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"14","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\features\\Login\\Login.tsx":"15","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\features\\Login\\auth-reducer.ts":"16"},{"size":749,"mtime":1616955922154,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":1607869388000,"results":"19","hashOfConfig":"18"},{"size":1183,"mtime":1617048026946,"results":"20","hashOfConfig":"18"},{"size":2191,"mtime":1617112301230,"results":"21","hashOfConfig":"18"},{"size":4955,"mtime":1617047891057,"results":"22","hashOfConfig":"18"},{"size":5486,"mtime":1617047891023,"results":"23","hashOfConfig":"18"},{"size":4086,"mtime":1617105259103,"results":"24","hashOfConfig":"18"},{"size":2990,"mtime":1617111145301,"results":"25","hashOfConfig":"18"},{"size":4015,"mtime":1616267465320,"results":"26","hashOfConfig":"18"},{"size":1634,"mtime":1616266427886,"results":"27","hashOfConfig":"18"},{"size":1773,"mtime":1596295538000,"results":"28","hashOfConfig":"18"},{"size":952,"mtime":1594154724000,"results":"29","hashOfConfig":"18"},{"size":2294,"mtime":1617124898912,"results":"30","hashOfConfig":"18"},{"size":1003,"mtime":1616240241689,"results":"31","hashOfConfig":"18"},{"size":3472,"mtime":1617102548302,"results":"32","hashOfConfig":"18"},{"size":1609,"mtime":1617108714956,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1rqeums",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\index.tsx",[],["73","74"],"C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\reportWebVitals.ts",[],"C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\app\\store.ts",[],"C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\app\\App.tsx",["75"],"import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Switch, Route, Redirect} from 'react-router-dom'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {initializeAppTC} from \"./app-reducer\";\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootStateType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType>((state) => state.app.isInitialized)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n    <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color={\"secondary\"}/>}\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\todolists-reducer.ts",[],"C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\tasks-reducer.ts",[],"C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\TodolistsList.tsx",["76","77","78","79","80","81","82","83"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        debugger\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                filter={tl.filter}\r\n                                entityStatus={tl.entityStatus}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\api\\todolists-api.ts",[],"C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["84","85","86","87","88","89"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    entityStatus: RequestStatusType\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'} >\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\components\\AddItemForm\\AddItemForm.tsx",["90","91","92"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.entityStatus === 'loading'}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["93","94","95"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\app\\app-reducer.ts",["96"],"C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\features\\Login\\Login.tsx",["97"],"import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be more than three characters'\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n       return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        { formik.touched.email && formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null }\r\n\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        { formik.touched.password && formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null }\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","C:\\IT-incubator\\it-incubator-todolist-ts-01\\src\\features\\Login\\auth-reducer.ts",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":30,"column":7,"nodeType":"104","endLine":30,"endColumn":9,"suggestions":"105"},{"ruleId":"102","severity":1,"message":"106","line":33,"column":8,"nodeType":"104","endLine":33,"endColumn":10,"suggestions":"107"},{"ruleId":"102","severity":1,"message":"108","line":38,"column":8,"nodeType":"104","endLine":38,"endColumn":10,"suggestions":"109"},{"ruleId":"102","severity":1,"message":"108","line":43,"column":8,"nodeType":"104","endLine":43,"endColumn":10,"suggestions":"110"},{"ruleId":"102","severity":1,"message":"108","line":48,"column":8,"nodeType":"104","endLine":48,"endColumn":10,"suggestions":"111"},{"ruleId":"102","severity":1,"message":"108","line":53,"column":8,"nodeType":"104","endLine":53,"endColumn":10,"suggestions":"112"},{"ruleId":"102","severity":1,"message":"108","line":58,"column":8,"nodeType":"104","endLine":58,"endColumn":10,"suggestions":"113"},{"ruleId":"102","severity":1,"message":"108","line":63,"column":8,"nodeType":"104","endLine":63,"endColumn":10,"suggestions":"114"},{"ruleId":"102","severity":1,"message":"108","line":68,"column":8,"nodeType":"104","endLine":68,"endColumn":10,"suggestions":"115"},{"ruleId":"102","severity":1,"message":"116","line":36,"column":8,"nodeType":"104","endLine":36,"endColumn":10,"suggestions":"117"},{"ruleId":"102","severity":1,"message":"118","line":40,"column":8,"nodeType":"104","endLine":40,"endColumn":33,"suggestions":"119"},{"ruleId":"102","severity":1,"message":"118","line":47,"column":8,"nodeType":"104","endLine":47,"endColumn":45,"suggestions":"120"},{"ruleId":"102","severity":1,"message":"118","line":49,"column":86,"nodeType":"104","endLine":49,"endColumn":116,"suggestions":"121"},{"ruleId":"102","severity":1,"message":"118","line":50,"column":92,"nodeType":"104","endLine":50,"endColumn":122,"suggestions":"122"},{"ruleId":"102","severity":1,"message":"118","line":51,"column":98,"nodeType":"104","endLine":51,"endColumn":128,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":2,"column":9,"nodeType":"126","messageId":"127","endLine":2,"endColumn":12},{"ruleId":"124","severity":1,"message":"128","line":2,"column":14,"nodeType":"126","messageId":"127","endLine":2,"endColumn":20},{"ruleId":"124","severity":1,"message":"129","line":2,"column":22,"nodeType":"126","messageId":"127","endLine":2,"endColumn":33},{"ruleId":"102","severity":1,"message":"118","line":15,"column":97,"nodeType":"104","endLine":15,"endColumn":130,"suggestions":"130"},{"ruleId":"102","severity":1,"message":"118","line":20,"column":8,"nodeType":"104","endLine":20,"endColumn":41,"suggestions":"131"},{"ruleId":"102","severity":1,"message":"118","line":24,"column":8,"nodeType":"104","endLine":24,"endColumn":41,"suggestions":"132"},{"ruleId":"124","severity":1,"message":"133","line":3,"column":26,"nodeType":"126","messageId":"127","endLine":3,"endColumn":49},{"ruleId":"134","severity":1,"message":"135","line":58,"column":29,"nodeType":"136","endLine":59,"endColumn":50},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["139"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isLoggedIn'. Either include them or remove the dependency array.",["140"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["141"],["142"],["143"],["144"],["145"],["146"],["147"],"React Hook useEffect has missing dependencies: 'dispatch' and 'props.id'. Either include them or remove the dependency array.",["148"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["149"],["150"],["151"],["152"],["153"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'FormControl' is defined but never used.",["154"],["155"],["156"],"'SetIsLoggedInActionType' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"157","fix":"161"},{"desc":"157","fix":"162"},{"desc":"157","fix":"163"},{"desc":"157","fix":"164"},{"desc":"157","fix":"165"},{"desc":"157","fix":"166"},{"desc":"157","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"170","fix":"172"},{"desc":"170","fix":"173"},{"desc":"170","fix":"174"},{"desc":"170","fix":"175"},{"desc":"170","fix":"176"},{"desc":"170","fix":"177"},{"desc":"170","fix":"178"},"Update the dependencies array to be: [dispatch]",{"range":"179","text":"180"},"Update the dependencies array to be: [dispatch, isLoggedIn]",{"range":"181","text":"182"},{"range":"183","text":"180"},{"range":"184","text":"180"},{"range":"185","text":"180"},{"range":"186","text":"180"},{"range":"187","text":"180"},{"range":"188","text":"180"},{"range":"189","text":"180"},"Update the dependencies array to be: [dispatch, props.id]",{"range":"190","text":"191"},"Update the dependencies array to be: [props]",{"range":"192","text":"193"},{"range":"194","text":"193"},{"range":"195","text":"193"},{"range":"196","text":"193"},{"range":"197","text":"193"},{"range":"198","text":"193"},{"range":"199","text":"193"},{"range":"200","text":"193"},[967,969],"[dispatch]",[1265,1267],"[dispatch, isLoggedIn]",[1436,1438],[1607,1609],[1812,1814],[2025,2027],[2226,2228],[2373,2375],[2552,2554],[1475,1477],"[dispatch, props.id]",[1583,1608],"[props]",[1821,1858],[1948,1978],[2072,2102],[2202,2232],[765,798],[1071,1104],[1261,1294]]